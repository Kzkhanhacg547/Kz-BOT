const axios = require('axios');
const moment = require("moment-timezone");
const fs = require("fs-extra");
const path = require("path");
const { exec } = require('child_process');
const os = require('os');
const { performance } = require('perf_hooks');

module.exports.config = {
  name: "main",
  version: "2.2.0",
  hasPermission: 2,
  credits: "Kz Kh√°nhh",
  description: "C·∫•u h√¨nh h·ªá th·ªëng bot",
  commandCategory: "H·ªá Th·ªëng",
  usages: "botsetting",
  cooldowns: 5,
  dependencies: {
    "axios": "",
    "fs-extra": "",
    "moment-timezone": ""
  }
};

const PERMISSION_DENIED_MSG = "B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y!";
const API_ENDPOINT = `${global.config.API.domain1}/`;
const QUOTE_API = 'https://api.quotable.io/random';

async function getRandomImages(count) {
  try {
    const imageUrls = await Promise.all(
      Array.from({ length: count }, () => axios.get(API_ENDPOINT).then(res => res.data.url))
    );
    return await Promise.all(imageUrls.map(url =>
      axios({ url, method: "GET", responseType: "stream" }).then(res => res.data)
    ));
  } catch (error) {
    console.error("L·ªói khi t·∫£i ·∫£nh:", error);
    return [];
  }
}

async function getRandomQuote() {
  try {
    const response = await axios.get(QUOTE_API);
    return response.data.content;
  } catch (error) {
    console.error("L·ªói khi l·∫•y quote:", error);
    return "Kh√¥ng th·ªÉ l·∫•y quote v√†o l√∫c n√†y.";
  }
}

function createSettingsMessage() {
  return `==„Äå C√ÄI ƒê·∫∂T BOT „Äç==
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
1: Kh·ªüi ƒë·ªông l·∫°i bot
2: T·∫Øt bot
3: Xem th√¥ng tin bot
4: ƒê·∫∑t l·∫°i ti·ªÅn cho t·∫•t c·∫£ th√†nh vi√™n
5: ƒê·∫∑t l·∫°i exp v√† s·ªë tin nh·∫Øn cho t·∫•t c·∫£ th√†nh vi√™n
6: C·∫≠p nh·∫≠t d·ªØ li·ªáu th√†nh vi√™n nh√≥m
7: C·∫≠p nh·∫≠t d·ªØ li·ªáu cho t·∫•t c·∫£ c√°c nh√≥m
8: Sao l∆∞u d·ªØ li·ªáu
9: D·ªçn d·∫πp file t·∫°m th·ªùi
10: Ki·ªÉm tra th·ªùi gian ho·∫°t ƒë·ªông c·ªßa bot
11: G·ª≠i m·ªôt quote ng·∫´u nhi√™n
12: Hi·ªÉn th·ªã tr·∫°ng th√°i server
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
Vui l√≤ng nh·∫≠p s·ªë ƒë·ªÉ ch·ªçn t√πy ch·ªçn.`;
}

module.exports.run = async ({ api, event, Threads }) => {
  const { threadID } = event;
  const attachments = await getRandomImages(6);

  api.sendMessage({
    body: createSettingsMessage(),
    attachment: attachments
  }, threadID, (err, info) => {
    if (err) {
      console.error("L·ªói khi g·ª≠i tin nh·∫Øn:", err);
      return;
    }
    global.client.handleReply.push({
      type: "botsetting",
      name: module.exports.config.name,
      author: event.senderID,
      messageID: info.messageID
    });
  });
};

module.exports.handleReply = async function({ api, event, Threads, Users, Currencies, handleReply }) {
  const { threadID, messageID, senderID } = event;
  const { ADMINBOT } = global.config;

  if (!ADMINBOT.includes(senderID)) {
    return api.sendMessage(PERMISSION_DENIED_MSG, threadID, messageID);
  }

  const actions = {
    "1": async () => restartBot(api, threadID),
    "2": async () => shutdownBot(api, threadID),
    "3": async () => viewBotInfo(api, threadID, Threads),
    "4": async () => resetMoney(api, threadID, Currencies),
    "5": async () => resetExpAndMessages(api, threadID, Currencies),
    "6": async () => updateUserGroupData(api, threadID, Users),
    "7": async () => updateAllGroupData(api, threadID, Threads),
    "8": async () => backupDatabase(api, threadID),
    "9": async () => cleanupTempFiles(api, threadID),
    "10": async () => checkBotUptime(api, threadID),
    "11": async () => sendRandomQuote(api, threadID),
    "12": async () => showServerStatus(api, threadID)
  };

  if (handleReply.type === "botsetting") {
    const action = actions[event.body];
    if (action) {
      await action();
    } else {
      api.sendMessage("T√πy ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i.", threadID);
    }
  }
};

async function restartBot(api, threadID) {
  api.sendMessage("ƒêang kh·ªüi ƒë·ªông l·∫°i bot...", threadID, () => process.exit(1));
}

async function shutdownBot(api, threadID) {
  api.sendMessage("ƒêang t·∫Øt bot...", threadID, () => process.exit(0));
}

async function viewBotInfo(api, threadID, Threads) {
  const { commands } = global.client;
  const { BOTNAME, PREFIX, ADMINBOT } = global.config;
  const threadSetting = (await Threads.getData(threadID)).data || {};
  const prefix = threadSetting.PREFIX || PREFIX;
  const ping = Date.now();

  const infoMessage = `==== [ TH√îNG TIN BOT ] ====
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üñ• S·ªë module: ${commands.size} l·ªánh
üìé Ti·ªÅn t·ªë: Ti·ªÅn t·ªë h·ªá th·ªëng l√† [ ${prefix} ]
üíì T√™n Bot: ${BOTNAME}
üëë Admin Bot: ${ADMINBOT.length}
üìå Ping: ${Date.now() - ping}ms
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
S·ª≠ d·ª•ng "${prefix}help" ƒë·ªÉ xem c√°c l·ªánh c√≥ s·∫µn`;

  api.sendMessage({ body: infoMessage, attachment: await getRandomImages(1) }, threadID);
}

async function resetMoney(api, threadID, Currencies) {
  const participantIDs = (await api.getThreadInfo(threadID)).participantIDs;
  for (const id of participantIDs) {
    await Currencies.setData(id, { money: 0 });
  }
  api.sendMessage("üíµ T·∫•t c·∫£ ti·ªÅn c·ªßa th√†nh vi√™n trong nh√≥m ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l·∫°i v·ªÅ 0!", threadID);
}

async function resetExpAndMessages(api, threadID, Currencies) {
  const participantIDs = (await api.getThreadInfo(threadID)).participantIDs;
  for (const id of participantIDs) {
    await Currencies.setData(id, { exp: 0, messageCount: 0 });
  }
  api.sendMessage("üçÅ T·∫•t c·∫£ exp v√† s·ªë tin nh·∫Øn c·ªßa th√†nh vi√™n trong nh√≥m ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l·∫°i v·ªÅ 0!", threadID);
}

async function updateUserGroupData(api, threadID, Users) {
  const participantIDs = (await api.getThreadInfo(threadID)).participantIDs;
  for (const id of participantIDs) {
    const { name } = await api.getUserInfo(id);
    await Users.setData(id, { name, data: {} });
  }
  api.sendMessage("üå∏ Th√¥ng tin ng∆∞·ªùi d√πng trong nh√≥m ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!", threadID);
}

async function updateAllGroupData(api, threadID, Threads) {
  const groups = await api.getThreadList(100, null, ['INBOX']);
  const groupList = groups.filter(group => group.isSubscribed && group.isGroup);
  for (const group of groupList) {
    const threadInfo = await api.getThreadInfo(group.threadID);
    await Threads.setData(group.threadID, { threadInfo });
  }
  api.sendMessage(`üëâ Th√¥ng tin c·ªßa ${groupList.length} nh√≥m ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!`, threadID);
}

async function backupDatabase(api, threadID) {
  const backupDir = './backups';
  if (!fs.existsSync(backupDir)) {
    fs.mkdirSync(backupDir);
  }

  const timestamp = moment().format('YYYY-MM-DD_HH-mm-ss');
  const backupFileName = `backup_${timestamp}.tar.gz`;
  const backupPath = path.join(backupDir, backupFileName);

  const dirsToBackup = [
    './modules/commands/cache',
    './modules/commands/data'
  ];

  const filesToBackup = [
    './config.json'
  ];

  const backupCommand = `tar -czf ${backupPath} ${dirsToBackup.join(' ')} ${filesToBackup.join(' ')}`;

  try {
    await new Promise((resolve, reject) => {
      exec(backupCommand, (error, stdout, stderr) => {
        if (error) {
          console.error(`L·ªói th·ª±c thi l·ªánh: ${error}`);
          return reject(error);
        }
        if (stderr) {
          console.error(`L·ªói stderr: ${stderr}`);
          return reject(new Error(stderr));
        }
        resolve(stdout);
      });
    });

    const backups = fs.readdirSync(backupDir).filter(file => file.startsWith('backup_') && file.endsWith('.tar.gz'));
    if (backups.length > 10) {
      const oldestBackup = backups.sort((a, b) => fs.statSync(path.join(backupDir, a)).mtimeMs - fs.statSync(path.join(backupDir, b)).mtimeMs)[0];
      fs.unlinkSync(path.join(backupDir, oldestBackup));
    }

    api.sendMessage("üóÇ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c sao l∆∞u th√†nh c√¥ng!", threadID);
  } catch (error) {
    api.sendMessage("‚ö†Ô∏è L·ªói khi sao l∆∞u d·ªØ li·ªáu: " + error.message, threadID);
  }
}

async function cleanupTempFiles(api, threadID) {
  const tempDir = path.join(os.tmpdir());
  const files = fs.readdirSync(tempDir);
  for (const file of files) {
    const filePath = path.join(tempDir, file);
    try {
      await fs.remove(filePath);
    } catch (error) {
      console.error(`L·ªói khi x√≥a t·ªáp t·∫°m th·ªùi: ${filePath}`, error);
    }
  }
  api.sendMessage("üßπ D·ªçn d·∫πp t·ªáp t·∫°m th·ªùi th√†nh c√¥ng!", threadID);
}

async function checkBotUptime(api, threadID) {
  const uptime = process.uptime();
  const days = Math.floor(uptime / 86400);
  const hours = Math.floor((uptime % 86400) / 3600);
  const minutes = Math.floor((uptime % 3600) / 60);
  const seconds = Math.floor(uptime % 60);

  const uptimeMessage = `‚è∞ Th·ªùi gian ho·∫°t ƒë·ªông c·ªßa bot:\n${days} ng√†y, ${hours} gi·ªù, ${minutes} ph√∫t, ${seconds} gi√¢y.`;
  api.sendMessage(uptimeMessage, threadID);
}

async function sendRandomQuote(api, threadID) {
  try {
    const response = await axios.get('https://api.quotable.io/random');
    const quoteData = response.data;
    const quoteMessage = `üí¨ Quote ng·∫´u nhi√™n:\n"${quoteData.content}"\n\n- ${quoteData.author}`;
    api.sendMessage(quoteMessage, threadID);
  } catch (error) {
    console.error("L·ªói khi l·∫•y quote:", error);
    api.sendMessage("‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y quote v√†o l√∫c n√†y.", threadID);
  }
}

async function showServerStatus(api, threadID) {
  const memoryUsage = process.memoryUsage();
  const totalMemory = (memoryUsage.heapTotal / (1024 * 1024)).toFixed(2);
  const usedMemory = (memoryUsage.heapUsed / (1024 * 1024)).toFixed(2);
  const freeMemory = (totalMemory - usedMemory).toFixed(2);
  const cpuUsage = process.cpuUsage();
  const cpuUsagePercentage = ((cpuUsage.user + cpuUsage.system) / (process.uptime() * 1000 * 1000)).toFixed(2);

  const statusMessage = `üìä Tr·∫°ng th√°i server:\n
    - T·ªïng b·ªô nh·ªõ: ${totalMemory} MB
    - B·ªô nh·ªõ ƒë√£ s·ª≠ d·ª•ng: ${usedMemory} MB
    - B·ªô nh·ªõ c√≤n tr·ªëng: ${freeMemory} MB
    - S·ª≠ d·ª•ng CPU: ${cpuUsagePercentage}%`;

  api.sendMessage(statusMessage, threadID);
}
